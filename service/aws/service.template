{
    "Description": "EC2 platform extension template for ADOP/C",
    "Mappings": {
        "RegionMap": {
            "eu-central-1": {
                "AMI": "ami-5216c53d"
            },
            "eu-west-1": {
                "AMI": "ami-ee9ea688"
            },
            "us-east-1": {
                "AMI": "ami-e03cb1f6"
            },
            "us-west-1": {
                "AMI": "ami-06c49e66"
            },
            "us-west-2": {
                "AMI": "ami-d844d5b8"
            }
        }
    },
    "Outputs": {
        "EC2InstancePrivateIp": {
            "Description": "EC2Instance Private IP",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Instance",
                    "PrivateIp"
                ]
            }
        },
        "EC2InstanceID" : {
            "Description": "EC2Instance ID",
            "Value" : { "Ref" : "EC2Instance" }
        }
    },
    "Parameters": {
        "EnvironmentName": {
            "Description": "The name of the EC2 instance being created",
            "Type": "String"
        },
        "EnvironmentSubnet": {
            "Description": "The ID of the subnet to create the instance in",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "InstanceType": {
            "Default": "m4.large",
            "Description": "EC2 instance type",
            "Type": "String"
        },
        "KeyName": {
            "Description": "Key-pair name to use.",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "VPCId": {
            "Description": "VPC ID where the instance will be created",
            "Type": "AWS::EC2::VPC::Id"
        },
        "InboundCIDR": {
            "Default": "10.0.0.0/16",
            "Description": "Inbound Security Group CIDR Block",
            "Type": "String"
        }
    },
    "Resources": {
        "DefaultSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enabling access to all IPs and below listed ports",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "0",
                        "IpProtocol": "tcp",
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "0",
                        "IpProtocol": "udp",
                        "ToPort": "65535"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "InboundCIDR"
                        },
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    },
                    {
                        "CidrIp":  {
                            "Ref": "InboundCIDR"
                        },
                        "FromPort": "8142",
                        "IpProtocol": "tcp",
                        "ToPort": "8142"
                    },
                    {
                        "CidrIp":  {
                            "Ref": "InboundCIDR"
                        },
                        "FromPort": "8143",
                        "IpProtocol": "tcp",
                        "ToPort": "8143"
                    },
                    {
                        "CidrIp":  {
                            "Ref": "InboundCIDR"
                        },
                        "FromPort": "61613",
                        "IpProtocol": "tcp",
                        "ToPort": "61613"
                    },
                    {
                        "CidrIp":  {
                            "Ref": "InboundCIDR"
                        },
                        "FromPort": "8140",
                        "IpProtocol": "tcp",
                        "ToPort": "8140"
                    }
                ],
                "VpcId": {
                    "Ref": "VPCId"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "EC2Instance": {
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": 50
                        }
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "DefaultSecurityGroup"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "EnvironmentSubnet"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "EnvironmentName"
                        }
                    },
                    {
                        "Key": "createdFor",
                        "Value": {
                            "Ref": "EnvironmentName"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/opt/puppetlabs/aws/bin/check_status.sh --wait\n",
                                "/opt/puppetlabs/aws/bin/configure-pe.rb -i -p 'ADOPdefaultP4$$'\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        }
    }
}
